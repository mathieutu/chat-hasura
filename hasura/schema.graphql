# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: query_root
    mutation: mutation_root
    subscription: subscription_root
}

"columns and relationships of \"channels\""
type channels {
    createdAt: timestamptz!
    description: String
    id: uuid!
    "An array relationship"
    messages(
        "distinct select on columns"
        distinct_on: [relation_channel_user_messages_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [relation_channel_user_messages_order_by!],
        "filter the rows returned"
        where: relation_channel_user_messages_bool_exp
    ): [relation_channel_user_messages!]!
    "An aggregated array relationship"
    messages_aggregate(
        "distinct select on columns"
        distinct_on: [relation_channel_user_messages_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [relation_channel_user_messages_order_by!],
        "filter the rows returned"
        where: relation_channel_user_messages_bool_exp
    ): relation_channel_user_messages_aggregate!
    name: String!
    "An array relationship"
    subscriptions(
        "distinct select on columns"
        distinct_on: [subscriptions_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [subscriptions_order_by!],
        "filter the rows returned"
        where: subscriptions_bool_exp
    ): [subscriptions!]!
    "An aggregated array relationship"
    subscriptions_aggregate(
        "distinct select on columns"
        distinct_on: [subscriptions_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [subscriptions_order_by!],
        "filter the rows returned"
        where: subscriptions_bool_exp
    ): subscriptions_aggregate!
    updatedAt: timestamptz!
    "An array relationship"
    users(
        "distinct select on columns"
        distinct_on: [relation_channel_users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [relation_channel_users_order_by!],
        "filter the rows returned"
        where: relation_channel_users_bool_exp
    ): [relation_channel_users!]!
    "An aggregated array relationship"
    users_aggregate(
        "distinct select on columns"
        distinct_on: [relation_channel_users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [relation_channel_users_order_by!],
        "filter the rows returned"
        where: relation_channel_users_bool_exp
    ): relation_channel_users_aggregate!
}

"aggregated selection of \"channels\""
type channels_aggregate {
    aggregate: channels_aggregate_fields
    nodes: [channels!]!
}

"aggregate fields of \"channels\""
type channels_aggregate_fields {
    count(columns: [channels_select_column!], distinct: Boolean): Int
    max: channels_max_fields
    min: channels_min_fields
}

"aggregate max on columns"
type channels_max_fields {
    createdAt: timestamptz
    description: String
    id: uuid
    name: String
    updatedAt: timestamptz
}

"aggregate min on columns"
type channels_min_fields {
    createdAt: timestamptz
    description: String
    id: uuid
    name: String
    updatedAt: timestamptz
}

"response of any mutation on the table \"channels\""
type channels_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [channels!]!
}

"columns and relationships of \"messages\""
type messages {
    content: String!
    createdAt: timestamptz!
    id: uuid!
    "An object relationship"
    subscription: subscriptions!
    subscriptionId: uuid!
    updatedAt: timestamptz!
}

"aggregated selection of \"messages\""
type messages_aggregate {
    aggregate: messages_aggregate_fields
    nodes: [messages!]!
}

"aggregate fields of \"messages\""
type messages_aggregate_fields {
    count(columns: [messages_select_column!], distinct: Boolean): Int
    max: messages_max_fields
    min: messages_min_fields
}

"aggregate max on columns"
type messages_max_fields {
    content: String
    createdAt: timestamptz
    id: uuid
    subscriptionId: uuid
    updatedAt: timestamptz
}

"aggregate min on columns"
type messages_min_fields {
    content: String
    createdAt: timestamptz
    id: uuid
    subscriptionId: uuid
    updatedAt: timestamptz
}

"response of any mutation on the table \"messages\""
type messages_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [messages!]!
}

"mutation root"
type mutation_root {
    "delete data from the table: \"channels\""
    delete_channels(
        "filter the rows which have to be deleted"
        where: channels_bool_exp!
    ): channels_mutation_response
    "delete single row from the table: \"channels\""
    delete_channels_by_pk(id: uuid!): channels
    "delete data from the table: \"messages\""
    delete_messages(
        "filter the rows which have to be deleted"
        where: messages_bool_exp!
    ): messages_mutation_response
    "delete single row from the table: \"messages\""
    delete_messages_by_pk(id: uuid!): messages
    "delete data from the table: \"subscriptions\""
    delete_subscriptions(
        "filter the rows which have to be deleted"
        where: subscriptions_bool_exp!
    ): subscriptions_mutation_response
    "delete single row from the table: \"subscriptions\""
    delete_subscriptions_by_pk(id: uuid!): subscriptions
    "delete data from the table: \"users\""
    delete_users(
        "filter the rows which have to be deleted"
        where: users_bool_exp!
    ): users_mutation_response
    "delete single row from the table: \"users\""
    delete_users_by_pk(id: uuid!): users
    "insert data into the table: \"channels\""
    insert_channels(
        "the rows to be inserted"
        objects: [channels_insert_input!]!,
        "on conflict condition"
        on_conflict: channels_on_conflict
    ): channels_mutation_response
    "insert a single row into the table: \"channels\""
    insert_channels_one(
        "the row to be inserted"
        object: channels_insert_input!,
        "on conflict condition"
        on_conflict: channels_on_conflict
    ): channels
    "insert data into the table: \"messages\""
    insert_messages(
        "the rows to be inserted"
        objects: [messages_insert_input!]!,
        "on conflict condition"
        on_conflict: messages_on_conflict
    ): messages_mutation_response
    "insert a single row into the table: \"messages\""
    insert_messages_one(
        "the row to be inserted"
        object: messages_insert_input!,
        "on conflict condition"
        on_conflict: messages_on_conflict
    ): messages
    "insert data into the table: \"subscriptions\""
    insert_subscriptions(
        "the rows to be inserted"
        objects: [subscriptions_insert_input!]!,
        "on conflict condition"
        on_conflict: subscriptions_on_conflict
    ): subscriptions_mutation_response
    "insert a single row into the table: \"subscriptions\""
    insert_subscriptions_one(
        "the row to be inserted"
        object: subscriptions_insert_input!,
        "on conflict condition"
        on_conflict: subscriptions_on_conflict
    ): subscriptions
    "insert data into the table: \"users\""
    insert_users(
        "the rows to be inserted"
        objects: [users_insert_input!]!,
        "on conflict condition"
        on_conflict: users_on_conflict
    ): users_mutation_response
    "insert a single row into the table: \"users\""
    insert_users_one(
        "the row to be inserted"
        object: users_insert_input!,
        "on conflict condition"
        on_conflict: users_on_conflict
    ): users
    "update data of the table: \"channels\""
    update_channels(
        "sets the columns of the filtered rows to the given values"
        _set: channels_set_input,
        "filter the rows which have to be updated"
        where: channels_bool_exp!
    ): channels_mutation_response
    "update single row of the table: \"channels\""
    update_channels_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: channels_set_input,
        pk_columns: channels_pk_columns_input!
    ): channels
    "update data of the table: \"messages\""
    update_messages(
        "sets the columns of the filtered rows to the given values"
        _set: messages_set_input,
        "filter the rows which have to be updated"
        where: messages_bool_exp!
    ): messages_mutation_response
    "update single row of the table: \"messages\""
    update_messages_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: messages_set_input,
        pk_columns: messages_pk_columns_input!
    ): messages
    "update data of the table: \"subscriptions\""
    update_subscriptions(
        "sets the columns of the filtered rows to the given values"
        _set: subscriptions_set_input,
        "filter the rows which have to be updated"
        where: subscriptions_bool_exp!
    ): subscriptions_mutation_response
    "update single row of the table: \"subscriptions\""
    update_subscriptions_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: subscriptions_set_input,
        pk_columns: subscriptions_pk_columns_input!
    ): subscriptions
    "update data of the table: \"users\""
    update_users(
        "sets the columns of the filtered rows to the given values"
        _set: users_set_input,
        "filter the rows which have to be updated"
        where: users_bool_exp!
    ): users_mutation_response
    "update single row of the table: \"users\""
    update_users_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: users_set_input,
        pk_columns: users_pk_columns_input!
    ): users
}

"query root"
type query_root {
    "fetch data from the table: \"channels\""
    channels(
        "distinct select on columns"
        distinct_on: [channels_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [channels_order_by!],
        "filter the rows returned"
        where: channels_bool_exp
    ): [channels!]!
    "fetch aggregated fields from the table: \"channels\""
    channels_aggregate(
        "distinct select on columns"
        distinct_on: [channels_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [channels_order_by!],
        "filter the rows returned"
        where: channels_bool_exp
    ): channels_aggregate!
    "fetch data from the table: \"channels\" using primary key columns"
    channels_by_pk(id: uuid!): channels
    "fetch data from the table: \"messages\""
    messages(
        "distinct select on columns"
        distinct_on: [messages_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [messages_order_by!],
        "filter the rows returned"
        where: messages_bool_exp
    ): [messages!]!
    "fetch aggregated fields from the table: \"messages\""
    messages_aggregate(
        "distinct select on columns"
        distinct_on: [messages_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [messages_order_by!],
        "filter the rows returned"
        where: messages_bool_exp
    ): messages_aggregate!
    "fetch data from the table: \"messages\" using primary key columns"
    messages_by_pk(id: uuid!): messages
    "fetch data from the table: \"relation_channel_user_messages\""
    relation_channel_user_messages(
        "distinct select on columns"
        distinct_on: [relation_channel_user_messages_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [relation_channel_user_messages_order_by!],
        "filter the rows returned"
        where: relation_channel_user_messages_bool_exp
    ): [relation_channel_user_messages!]!
    "fetch aggregated fields from the table: \"relation_channel_user_messages\""
    relation_channel_user_messages_aggregate(
        "distinct select on columns"
        distinct_on: [relation_channel_user_messages_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [relation_channel_user_messages_order_by!],
        "filter the rows returned"
        where: relation_channel_user_messages_bool_exp
    ): relation_channel_user_messages_aggregate!
    "fetch data from the table: \"relation_channel_users\""
    relation_channel_users(
        "distinct select on columns"
        distinct_on: [relation_channel_users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [relation_channel_users_order_by!],
        "filter the rows returned"
        where: relation_channel_users_bool_exp
    ): [relation_channel_users!]!
    "fetch aggregated fields from the table: \"relation_channel_users\""
    relation_channel_users_aggregate(
        "distinct select on columns"
        distinct_on: [relation_channel_users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [relation_channel_users_order_by!],
        "filter the rows returned"
        where: relation_channel_users_bool_exp
    ): relation_channel_users_aggregate!
    "fetch data from the table: \"relation_user_channels\""
    relation_user_channels(
        "distinct select on columns"
        distinct_on: [relation_user_channels_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [relation_user_channels_order_by!],
        "filter the rows returned"
        where: relation_user_channels_bool_exp
    ): [relation_user_channels!]!
    "fetch aggregated fields from the table: \"relation_user_channels\""
    relation_user_channels_aggregate(
        "distinct select on columns"
        distinct_on: [relation_user_channels_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [relation_user_channels_order_by!],
        "filter the rows returned"
        where: relation_user_channels_bool_exp
    ): relation_user_channels_aggregate!
    "fetch data from the table: \"subscriptions\""
    subscriptions(
        "distinct select on columns"
        distinct_on: [subscriptions_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [subscriptions_order_by!],
        "filter the rows returned"
        where: subscriptions_bool_exp
    ): [subscriptions!]!
    "fetch aggregated fields from the table: \"subscriptions\""
    subscriptions_aggregate(
        "distinct select on columns"
        distinct_on: [subscriptions_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [subscriptions_order_by!],
        "filter the rows returned"
        where: subscriptions_bool_exp
    ): subscriptions_aggregate!
    "fetch data from the table: \"subscriptions\" using primary key columns"
    subscriptions_by_pk(id: uuid!): subscriptions
    "fetch data from the table: \"users\""
    users(
        "distinct select on columns"
        distinct_on: [users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [users_order_by!],
        "filter the rows returned"
        where: users_bool_exp
    ): [users!]!
    "fetch aggregated fields from the table: \"users\""
    users_aggregate(
        "distinct select on columns"
        distinct_on: [users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [users_order_by!],
        "filter the rows returned"
        where: users_bool_exp
    ): users_aggregate!
    "fetch data from the table: \"users\" using primary key columns"
    users_by_pk(id: uuid!): users
}

"columns and relationships of \"relation_channel_user_messages\""
type relation_channel_user_messages {
    "An object relationship"
    channel: channels
    channelId: uuid
    content: String
    createdAt: timestamptz
    id: uuid
    subscriptionId: uuid
    updatedAt: timestamptz
    "An object relationship"
    user: users
    userId: uuid
}

"aggregated selection of \"relation_channel_user_messages\""
type relation_channel_user_messages_aggregate {
    aggregate: relation_channel_user_messages_aggregate_fields
    nodes: [relation_channel_user_messages!]!
}

"aggregate fields of \"relation_channel_user_messages\""
type relation_channel_user_messages_aggregate_fields {
    count(columns: [relation_channel_user_messages_select_column!], distinct: Boolean): Int
    max: relation_channel_user_messages_max_fields
    min: relation_channel_user_messages_min_fields
}

"aggregate max on columns"
type relation_channel_user_messages_max_fields {
    channelId: uuid
    content: String
    createdAt: timestamptz
    id: uuid
    subscriptionId: uuid
    updatedAt: timestamptz
    userId: uuid
}

"aggregate min on columns"
type relation_channel_user_messages_min_fields {
    channelId: uuid
    content: String
    createdAt: timestamptz
    id: uuid
    subscriptionId: uuid
    updatedAt: timestamptz
    userId: uuid
}

"columns and relationships of \"relation_channel_users\""
type relation_channel_users {
    channelId: uuid
    "An array relationship"
    channels(
        "distinct select on columns"
        distinct_on: [relation_user_channels_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [relation_user_channels_order_by!],
        "filter the rows returned"
        where: relation_user_channels_bool_exp
    ): [relation_user_channels!]!
    "An aggregated array relationship"
    channels_aggregate(
        "distinct select on columns"
        distinct_on: [relation_user_channels_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [relation_user_channels_order_by!],
        "filter the rows returned"
        where: relation_user_channels_bool_exp
    ): relation_user_channels_aggregate!
    createdAt: timestamptz
    email: String
    first_name: String
    id: uuid
    last_name: String
    updatedAt: timestamptz
    username: String
}

"aggregated selection of \"relation_channel_users\""
type relation_channel_users_aggregate {
    aggregate: relation_channel_users_aggregate_fields
    nodes: [relation_channel_users!]!
}

"aggregate fields of \"relation_channel_users\""
type relation_channel_users_aggregate_fields {
    count(columns: [relation_channel_users_select_column!], distinct: Boolean): Int
    max: relation_channel_users_max_fields
    min: relation_channel_users_min_fields
}

"aggregate max on columns"
type relation_channel_users_max_fields {
    channelId: uuid
    createdAt: timestamptz
    email: String
    first_name: String
    id: uuid
    last_name: String
    updatedAt: timestamptz
    username: String
}

"aggregate min on columns"
type relation_channel_users_min_fields {
    channelId: uuid
    createdAt: timestamptz
    email: String
    first_name: String
    id: uuid
    last_name: String
    updatedAt: timestamptz
    username: String
}

"columns and relationships of \"relation_user_channels\""
type relation_user_channels {
    createdAt: timestamptz
    description: String
    id: uuid
    name: String
    updatedAt: timestamptz
    userId: uuid
    "An array relationship"
    users(
        "distinct select on columns"
        distinct_on: [relation_channel_users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [relation_channel_users_order_by!],
        "filter the rows returned"
        where: relation_channel_users_bool_exp
    ): [relation_channel_users!]!
    "An aggregated array relationship"
    users_aggregate(
        "distinct select on columns"
        distinct_on: [relation_channel_users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [relation_channel_users_order_by!],
        "filter the rows returned"
        where: relation_channel_users_bool_exp
    ): relation_channel_users_aggregate!
}

"aggregated selection of \"relation_user_channels\""
type relation_user_channels_aggregate {
    aggregate: relation_user_channels_aggregate_fields
    nodes: [relation_user_channels!]!
}

"aggregate fields of \"relation_user_channels\""
type relation_user_channels_aggregate_fields {
    count(columns: [relation_user_channels_select_column!], distinct: Boolean): Int
    max: relation_user_channels_max_fields
    min: relation_user_channels_min_fields
}

"aggregate max on columns"
type relation_user_channels_max_fields {
    createdAt: timestamptz
    description: String
    id: uuid
    name: String
    updatedAt: timestamptz
    userId: uuid
}

"aggregate min on columns"
type relation_user_channels_min_fields {
    createdAt: timestamptz
    description: String
    id: uuid
    name: String
    updatedAt: timestamptz
    userId: uuid
}

"subscription root"
type subscription_root {
    "fetch data from the table: \"channels\""
    channels(
        "distinct select on columns"
        distinct_on: [channels_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [channels_order_by!],
        "filter the rows returned"
        where: channels_bool_exp
    ): [channels!]!
    "fetch aggregated fields from the table: \"channels\""
    channels_aggregate(
        "distinct select on columns"
        distinct_on: [channels_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [channels_order_by!],
        "filter the rows returned"
        where: channels_bool_exp
    ): channels_aggregate!
    "fetch data from the table: \"channels\" using primary key columns"
    channels_by_pk(id: uuid!): channels
    "fetch data from the table: \"messages\""
    messages(
        "distinct select on columns"
        distinct_on: [messages_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [messages_order_by!],
        "filter the rows returned"
        where: messages_bool_exp
    ): [messages!]!
    "fetch aggregated fields from the table: \"messages\""
    messages_aggregate(
        "distinct select on columns"
        distinct_on: [messages_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [messages_order_by!],
        "filter the rows returned"
        where: messages_bool_exp
    ): messages_aggregate!
    "fetch data from the table: \"messages\" using primary key columns"
    messages_by_pk(id: uuid!): messages
    "fetch data from the table: \"relation_channel_user_messages\""
    relation_channel_user_messages(
        "distinct select on columns"
        distinct_on: [relation_channel_user_messages_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [relation_channel_user_messages_order_by!],
        "filter the rows returned"
        where: relation_channel_user_messages_bool_exp
    ): [relation_channel_user_messages!]!
    "fetch aggregated fields from the table: \"relation_channel_user_messages\""
    relation_channel_user_messages_aggregate(
        "distinct select on columns"
        distinct_on: [relation_channel_user_messages_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [relation_channel_user_messages_order_by!],
        "filter the rows returned"
        where: relation_channel_user_messages_bool_exp
    ): relation_channel_user_messages_aggregate!
    "fetch data from the table: \"relation_channel_users\""
    relation_channel_users(
        "distinct select on columns"
        distinct_on: [relation_channel_users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [relation_channel_users_order_by!],
        "filter the rows returned"
        where: relation_channel_users_bool_exp
    ): [relation_channel_users!]!
    "fetch aggregated fields from the table: \"relation_channel_users\""
    relation_channel_users_aggregate(
        "distinct select on columns"
        distinct_on: [relation_channel_users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [relation_channel_users_order_by!],
        "filter the rows returned"
        where: relation_channel_users_bool_exp
    ): relation_channel_users_aggregate!
    "fetch data from the table: \"relation_user_channels\""
    relation_user_channels(
        "distinct select on columns"
        distinct_on: [relation_user_channels_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [relation_user_channels_order_by!],
        "filter the rows returned"
        where: relation_user_channels_bool_exp
    ): [relation_user_channels!]!
    "fetch aggregated fields from the table: \"relation_user_channels\""
    relation_user_channels_aggregate(
        "distinct select on columns"
        distinct_on: [relation_user_channels_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [relation_user_channels_order_by!],
        "filter the rows returned"
        where: relation_user_channels_bool_exp
    ): relation_user_channels_aggregate!
    "fetch data from the table: \"subscriptions\""
    subscriptions(
        "distinct select on columns"
        distinct_on: [subscriptions_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [subscriptions_order_by!],
        "filter the rows returned"
        where: subscriptions_bool_exp
    ): [subscriptions!]!
    "fetch aggregated fields from the table: \"subscriptions\""
    subscriptions_aggregate(
        "distinct select on columns"
        distinct_on: [subscriptions_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [subscriptions_order_by!],
        "filter the rows returned"
        where: subscriptions_bool_exp
    ): subscriptions_aggregate!
    "fetch data from the table: \"subscriptions\" using primary key columns"
    subscriptions_by_pk(id: uuid!): subscriptions
    "fetch data from the table: \"users\""
    users(
        "distinct select on columns"
        distinct_on: [users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [users_order_by!],
        "filter the rows returned"
        where: users_bool_exp
    ): [users!]!
    "fetch aggregated fields from the table: \"users\""
    users_aggregate(
        "distinct select on columns"
        distinct_on: [users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [users_order_by!],
        "filter the rows returned"
        where: users_bool_exp
    ): users_aggregate!
    "fetch data from the table: \"users\" using primary key columns"
    users_by_pk(id: uuid!): users
}

"columns and relationships of \"subscriptions\""
type subscriptions {
    "An object relationship"
    channel: channels!
    channelId: uuid!
    createdAt: timestamptz!
    id: uuid!
    "An array relationship"
    messages(
        "distinct select on columns"
        distinct_on: [messages_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [messages_order_by!],
        "filter the rows returned"
        where: messages_bool_exp
    ): [messages!]!
    "An aggregated array relationship"
    messages_aggregate(
        "distinct select on columns"
        distinct_on: [messages_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [messages_order_by!],
        "filter the rows returned"
        where: messages_bool_exp
    ): messages_aggregate!
    "An object relationship"
    user: users!
    userId: uuid!
}

"aggregated selection of \"subscriptions\""
type subscriptions_aggregate {
    aggregate: subscriptions_aggregate_fields
    nodes: [subscriptions!]!
}

"aggregate fields of \"subscriptions\""
type subscriptions_aggregate_fields {
    count(columns: [subscriptions_select_column!], distinct: Boolean): Int
    max: subscriptions_max_fields
    min: subscriptions_min_fields
}

"aggregate max on columns"
type subscriptions_max_fields {
    channelId: uuid
    createdAt: timestamptz
    id: uuid
    userId: uuid
}

"aggregate min on columns"
type subscriptions_min_fields {
    channelId: uuid
    createdAt: timestamptz
    id: uuid
    userId: uuid
}

"response of any mutation on the table \"subscriptions\""
type subscriptions_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [subscriptions!]!
}

"columns and relationships of \"users\""
type users {
    "An array relationship"
    channels(
        "distinct select on columns"
        distinct_on: [relation_user_channels_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [relation_user_channels_order_by!],
        "filter the rows returned"
        where: relation_user_channels_bool_exp
    ): [relation_user_channels!]!
    "An aggregated array relationship"
    channels_aggregate(
        "distinct select on columns"
        distinct_on: [relation_user_channels_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [relation_user_channels_order_by!],
        "filter the rows returned"
        where: relation_user_channels_bool_exp
    ): relation_user_channels_aggregate!
    createdAt: timestamptz!
    email: String!
    firstName: String!
    id: uuid!
    lastName: String!
    "An array relationship"
    messages(
        "distinct select on columns"
        distinct_on: [relation_channel_user_messages_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [relation_channel_user_messages_order_by!],
        "filter the rows returned"
        where: relation_channel_user_messages_bool_exp
    ): [relation_channel_user_messages!]!
    "An aggregated array relationship"
    messages_aggregate(
        "distinct select on columns"
        distinct_on: [relation_channel_user_messages_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [relation_channel_user_messages_order_by!],
        "filter the rows returned"
        where: relation_channel_user_messages_bool_exp
    ): relation_channel_user_messages_aggregate!
    "An array relationship"
    subscriptions(
        "distinct select on columns"
        distinct_on: [subscriptions_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [subscriptions_order_by!],
        "filter the rows returned"
        where: subscriptions_bool_exp
    ): [subscriptions!]!
    "An aggregated array relationship"
    subscriptions_aggregate(
        "distinct select on columns"
        distinct_on: [subscriptions_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [subscriptions_order_by!],
        "filter the rows returned"
        where: subscriptions_bool_exp
    ): subscriptions_aggregate!
    updatedAt: timestamptz!
    username: String!
}

"aggregated selection of \"users\""
type users_aggregate {
    aggregate: users_aggregate_fields
    nodes: [users!]!
}

"aggregate fields of \"users\""
type users_aggregate_fields {
    count(columns: [users_select_column!], distinct: Boolean): Int
    max: users_max_fields
    min: users_min_fields
}

"aggregate max on columns"
type users_max_fields {
    createdAt: timestamptz
    email: String
    firstName: String
    id: uuid
    lastName: String
    updatedAt: timestamptz
    username: String
}

"aggregate min on columns"
type users_min_fields {
    createdAt: timestamptz
    email: String
    firstName: String
    id: uuid
    lastName: String
    updatedAt: timestamptz
    username: String
}

"response of any mutation on the table \"users\""
type users_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [users!]!
}

"unique or primary key constraints on table \"channels\""
enum channels_constraint {
    "unique or primary key constraint"
    channels_name_key
    "unique or primary key constraint"
    channels_pkey
}

"select columns of table \"channels\""
enum channels_select_column {
    "column name"
    createdAt
    "column name"
    description
    "column name"
    id
    "column name"
    name
    "column name"
    updatedAt
}

"update columns of table \"channels\""
enum channels_update_column {
    "column name"
    createdAt
    "column name"
    description
    "column name"
    id
    "column name"
    name
    "column name"
    updatedAt
}

"unique or primary key constraints on table \"messages\""
enum messages_constraint {
    "unique or primary key constraint"
    messages_pkey
}

"select columns of table \"messages\""
enum messages_select_column {
    "column name"
    content
    "column name"
    createdAt
    "column name"
    id
    "column name"
    subscriptionId
    "column name"
    updatedAt
}

"update columns of table \"messages\""
enum messages_update_column {
    "column name"
    content
    "column name"
    createdAt
    "column name"
    id
    "column name"
    subscriptionId
    "column name"
    updatedAt
}

"column ordering options"
enum order_by {
    "in the ascending order, nulls last"
    asc
    "in the ascending order, nulls first"
    asc_nulls_first
    "in the ascending order, nulls last"
    asc_nulls_last
    "in the descending order, nulls first"
    desc
    "in the descending order, nulls first"
    desc_nulls_first
    "in the descending order, nulls last"
    desc_nulls_last
}

"select columns of table \"relation_channel_user_messages\""
enum relation_channel_user_messages_select_column {
    "column name"
    channelId
    "column name"
    content
    "column name"
    createdAt
    "column name"
    id
    "column name"
    subscriptionId
    "column name"
    updatedAt
    "column name"
    userId
}

"select columns of table \"relation_channel_users\""
enum relation_channel_users_select_column {
    "column name"
    channelId
    "column name"
    createdAt
    "column name"
    email
    "column name"
    first_name
    "column name"
    id
    "column name"
    last_name
    "column name"
    updatedAt
    "column name"
    username
}

"select columns of table \"relation_user_channels\""
enum relation_user_channels_select_column {
    "column name"
    createdAt
    "column name"
    description
    "column name"
    id
    "column name"
    name
    "column name"
    updatedAt
    "column name"
    userId
}

"unique or primary key constraints on table \"subscriptions\""
enum subscriptions_constraint {
    "unique or primary key constraint"
    subscriptions_pkey
    "unique or primary key constraint"
    subscriptions_user_id_channel_id_key
}

"select columns of table \"subscriptions\""
enum subscriptions_select_column {
    "column name"
    channelId
    "column name"
    createdAt
    "column name"
    id
    "column name"
    userId
}

"update columns of table \"subscriptions\""
enum subscriptions_update_column {
    "column name"
    channelId
    "column name"
    createdAt
    "column name"
    id
    "column name"
    userId
}

"unique or primary key constraints on table \"users\""
enum users_constraint {
    "unique or primary key constraint"
    users_email_key
    "unique or primary key constraint"
    users_pkey
    "unique or primary key constraint"
    users_username_key
}

"select columns of table \"users\""
enum users_select_column {
    "column name"
    createdAt
    "column name"
    email
    "column name"
    firstName
    "column name"
    id
    "column name"
    lastName
    "column name"
    updatedAt
    "column name"
    username
}

"update columns of table \"users\""
enum users_update_column {
    "column name"
    createdAt
    "column name"
    email
    "column name"
    firstName
    "column name"
    id
    "column name"
    lastName
    "column name"
    updatedAt
    "column name"
    username
}

"expression to compare columns of type String. All fields are combined with logical 'AND'."
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    _ilike: String
    _in: [String!]
    _is_null: Boolean
    _like: String
    _lt: String
    _lte: String
    _neq: String
    _nilike: String
    _nin: [String!]
    _nlike: String
    _nsimilar: String
    _similar: String
}

"order by aggregate values of table \"channels\""
input channels_aggregate_order_by {
    count: order_by
    max: channels_max_order_by
    min: channels_min_order_by
}

"input type for inserting array relation for remote table \"channels\""
input channels_arr_rel_insert_input {
    data: [channels_insert_input!]!
    on_conflict: channels_on_conflict
}

"Boolean expression to filter rows from the table \"channels\". All fields are combined with a logical 'AND'."
input channels_bool_exp {
    _and: [channels_bool_exp]
    _not: channels_bool_exp
    _or: [channels_bool_exp]
    createdAt: timestamptz_comparison_exp
    description: String_comparison_exp
    id: uuid_comparison_exp
    messages: relation_channel_user_messages_bool_exp
    name: String_comparison_exp
    subscriptions: subscriptions_bool_exp
    updatedAt: timestamptz_comparison_exp
    users: relation_channel_users_bool_exp
}

"input type for inserting data into table \"channels\""
input channels_insert_input {
    createdAt: timestamptz
    description: String
    id: uuid
    name: String
    subscriptions: subscriptions_arr_rel_insert_input
    updatedAt: timestamptz
}

"order by max() on columns of table \"channels\""
input channels_max_order_by {
    createdAt: order_by
    description: order_by
    id: order_by
    name: order_by
    updatedAt: order_by
}

"order by min() on columns of table \"channels\""
input channels_min_order_by {
    createdAt: order_by
    description: order_by
    id: order_by
    name: order_by
    updatedAt: order_by
}

"input type for inserting object relation for remote table \"channels\""
input channels_obj_rel_insert_input {
    data: channels_insert_input!
    on_conflict: channels_on_conflict
}

"on conflict condition type for table \"channels\""
input channels_on_conflict {
    constraint: channels_constraint!
    update_columns: [channels_update_column!]!
    where: channels_bool_exp
}

"ordering options when selecting data from \"channels\""
input channels_order_by {
    createdAt: order_by
    description: order_by
    id: order_by
    messages_aggregate: relation_channel_user_messages_aggregate_order_by
    name: order_by
    subscriptions_aggregate: subscriptions_aggregate_order_by
    updatedAt: order_by
    users_aggregate: relation_channel_users_aggregate_order_by
}

"primary key columns input for table: \"channels\""
input channels_pk_columns_input {
    id: uuid!
}

"input type for updating data in table \"channels\""
input channels_set_input {
    createdAt: timestamptz
    description: String
    id: uuid
    name: String
    updatedAt: timestamptz
}

"order by aggregate values of table \"messages\""
input messages_aggregate_order_by {
    count: order_by
    max: messages_max_order_by
    min: messages_min_order_by
}

"input type for inserting array relation for remote table \"messages\""
input messages_arr_rel_insert_input {
    data: [messages_insert_input!]!
    on_conflict: messages_on_conflict
}

"Boolean expression to filter rows from the table \"messages\". All fields are combined with a logical 'AND'."
input messages_bool_exp {
    _and: [messages_bool_exp]
    _not: messages_bool_exp
    _or: [messages_bool_exp]
    content: String_comparison_exp
    createdAt: timestamptz_comparison_exp
    id: uuid_comparison_exp
    subscription: subscriptions_bool_exp
    subscriptionId: uuid_comparison_exp
    updatedAt: timestamptz_comparison_exp
}

"input type for inserting data into table \"messages\""
input messages_insert_input {
    content: String
    createdAt: timestamptz
    id: uuid
    subscription: subscriptions_obj_rel_insert_input
    subscriptionId: uuid
    updatedAt: timestamptz
}

"order by max() on columns of table \"messages\""
input messages_max_order_by {
    content: order_by
    createdAt: order_by
    id: order_by
    subscriptionId: order_by
    updatedAt: order_by
}

"order by min() on columns of table \"messages\""
input messages_min_order_by {
    content: order_by
    createdAt: order_by
    id: order_by
    subscriptionId: order_by
    updatedAt: order_by
}

"input type for inserting object relation for remote table \"messages\""
input messages_obj_rel_insert_input {
    data: messages_insert_input!
    on_conflict: messages_on_conflict
}

"on conflict condition type for table \"messages\""
input messages_on_conflict {
    constraint: messages_constraint!
    update_columns: [messages_update_column!]!
    where: messages_bool_exp
}

"ordering options when selecting data from \"messages\""
input messages_order_by {
    content: order_by
    createdAt: order_by
    id: order_by
    subscription: subscriptions_order_by
    subscriptionId: order_by
    updatedAt: order_by
}

"primary key columns input for table: \"messages\""
input messages_pk_columns_input {
    id: uuid!
}

"input type for updating data in table \"messages\""
input messages_set_input {
    content: String
    createdAt: timestamptz
    id: uuid
    subscriptionId: uuid
    updatedAt: timestamptz
}

"order by aggregate values of table \"relation_channel_user_messages\""
input relation_channel_user_messages_aggregate_order_by {
    count: order_by
    max: relation_channel_user_messages_max_order_by
    min: relation_channel_user_messages_min_order_by
}

"Boolean expression to filter rows from the table \"relation_channel_user_messages\". All fields are combined with a logical 'AND'."
input relation_channel_user_messages_bool_exp {
    _and: [relation_channel_user_messages_bool_exp]
    _not: relation_channel_user_messages_bool_exp
    _or: [relation_channel_user_messages_bool_exp]
    channel: channels_bool_exp
    channelId: uuid_comparison_exp
    content: String_comparison_exp
    createdAt: timestamptz_comparison_exp
    id: uuid_comparison_exp
    subscriptionId: uuid_comparison_exp
    updatedAt: timestamptz_comparison_exp
    user: users_bool_exp
    userId: uuid_comparison_exp
}

"order by max() on columns of table \"relation_channel_user_messages\""
input relation_channel_user_messages_max_order_by {
    channelId: order_by
    content: order_by
    createdAt: order_by
    id: order_by
    subscriptionId: order_by
    updatedAt: order_by
    userId: order_by
}

"order by min() on columns of table \"relation_channel_user_messages\""
input relation_channel_user_messages_min_order_by {
    channelId: order_by
    content: order_by
    createdAt: order_by
    id: order_by
    subscriptionId: order_by
    updatedAt: order_by
    userId: order_by
}

"ordering options when selecting data from \"relation_channel_user_messages\""
input relation_channel_user_messages_order_by {
    channel: channels_order_by
    channelId: order_by
    content: order_by
    createdAt: order_by
    id: order_by
    subscriptionId: order_by
    updatedAt: order_by
    user: users_order_by
    userId: order_by
}

"order by aggregate values of table \"relation_channel_users\""
input relation_channel_users_aggregate_order_by {
    count: order_by
    max: relation_channel_users_max_order_by
    min: relation_channel_users_min_order_by
}

"Boolean expression to filter rows from the table \"relation_channel_users\". All fields are combined with a logical 'AND'."
input relation_channel_users_bool_exp {
    _and: [relation_channel_users_bool_exp]
    _not: relation_channel_users_bool_exp
    _or: [relation_channel_users_bool_exp]
    channelId: uuid_comparison_exp
    channels: relation_user_channels_bool_exp
    createdAt: timestamptz_comparison_exp
    email: String_comparison_exp
    first_name: String_comparison_exp
    id: uuid_comparison_exp
    last_name: String_comparison_exp
    updatedAt: timestamptz_comparison_exp
    username: String_comparison_exp
}

"order by max() on columns of table \"relation_channel_users\""
input relation_channel_users_max_order_by {
    channelId: order_by
    createdAt: order_by
    email: order_by
    first_name: order_by
    id: order_by
    last_name: order_by
    updatedAt: order_by
    username: order_by
}

"order by min() on columns of table \"relation_channel_users\""
input relation_channel_users_min_order_by {
    channelId: order_by
    createdAt: order_by
    email: order_by
    first_name: order_by
    id: order_by
    last_name: order_by
    updatedAt: order_by
    username: order_by
}

"ordering options when selecting data from \"relation_channel_users\""
input relation_channel_users_order_by {
    channelId: order_by
    channels_aggregate: relation_user_channels_aggregate_order_by
    createdAt: order_by
    email: order_by
    first_name: order_by
    id: order_by
    last_name: order_by
    updatedAt: order_by
    username: order_by
}

"order by aggregate values of table \"relation_user_channels\""
input relation_user_channels_aggregate_order_by {
    count: order_by
    max: relation_user_channels_max_order_by
    min: relation_user_channels_min_order_by
}

"Boolean expression to filter rows from the table \"relation_user_channels\". All fields are combined with a logical 'AND'."
input relation_user_channels_bool_exp {
    _and: [relation_user_channels_bool_exp]
    _not: relation_user_channels_bool_exp
    _or: [relation_user_channels_bool_exp]
    createdAt: timestamptz_comparison_exp
    description: String_comparison_exp
    id: uuid_comparison_exp
    name: String_comparison_exp
    updatedAt: timestamptz_comparison_exp
    userId: uuid_comparison_exp
    users: relation_channel_users_bool_exp
}

"order by max() on columns of table \"relation_user_channels\""
input relation_user_channels_max_order_by {
    createdAt: order_by
    description: order_by
    id: order_by
    name: order_by
    updatedAt: order_by
    userId: order_by
}

"order by min() on columns of table \"relation_user_channels\""
input relation_user_channels_min_order_by {
    createdAt: order_by
    description: order_by
    id: order_by
    name: order_by
    updatedAt: order_by
    userId: order_by
}

"ordering options when selecting data from \"relation_user_channels\""
input relation_user_channels_order_by {
    createdAt: order_by
    description: order_by
    id: order_by
    name: order_by
    updatedAt: order_by
    userId: order_by
    users_aggregate: relation_channel_users_aggregate_order_by
}

"order by aggregate values of table \"subscriptions\""
input subscriptions_aggregate_order_by {
    count: order_by
    max: subscriptions_max_order_by
    min: subscriptions_min_order_by
}

"input type for inserting array relation for remote table \"subscriptions\""
input subscriptions_arr_rel_insert_input {
    data: [subscriptions_insert_input!]!
    on_conflict: subscriptions_on_conflict
}

"Boolean expression to filter rows from the table \"subscriptions\". All fields are combined with a logical 'AND'."
input subscriptions_bool_exp {
    _and: [subscriptions_bool_exp]
    _not: subscriptions_bool_exp
    _or: [subscriptions_bool_exp]
    channel: channels_bool_exp
    channelId: uuid_comparison_exp
    createdAt: timestamptz_comparison_exp
    id: uuid_comparison_exp
    messages: messages_bool_exp
    user: users_bool_exp
    userId: uuid_comparison_exp
}

"input type for inserting data into table \"subscriptions\""
input subscriptions_insert_input {
    channel: channels_obj_rel_insert_input
    channelId: uuid
    createdAt: timestamptz
    id: uuid
    messages: messages_arr_rel_insert_input
    user: users_obj_rel_insert_input
    userId: uuid
}

"order by max() on columns of table \"subscriptions\""
input subscriptions_max_order_by {
    channelId: order_by
    createdAt: order_by
    id: order_by
    userId: order_by
}

"order by min() on columns of table \"subscriptions\""
input subscriptions_min_order_by {
    channelId: order_by
    createdAt: order_by
    id: order_by
    userId: order_by
}

"input type for inserting object relation for remote table \"subscriptions\""
input subscriptions_obj_rel_insert_input {
    data: subscriptions_insert_input!
    on_conflict: subscriptions_on_conflict
}

"on conflict condition type for table \"subscriptions\""
input subscriptions_on_conflict {
    constraint: subscriptions_constraint!
    update_columns: [subscriptions_update_column!]!
    where: subscriptions_bool_exp
}

"ordering options when selecting data from \"subscriptions\""
input subscriptions_order_by {
    channel: channels_order_by
    channelId: order_by
    createdAt: order_by
    id: order_by
    messages_aggregate: messages_aggregate_order_by
    user: users_order_by
    userId: order_by
}

"primary key columns input for table: \"subscriptions\""
input subscriptions_pk_columns_input {
    id: uuid!
}

"input type for updating data in table \"subscriptions\""
input subscriptions_set_input {
    channelId: uuid
    createdAt: timestamptz
    id: uuid
    userId: uuid
}

"expression to compare columns of type timestamptz. All fields are combined with logical 'AND'."
input timestamptz_comparison_exp {
    _eq: timestamptz
    _gt: timestamptz
    _gte: timestamptz
    _in: [timestamptz!]
    _is_null: Boolean
    _lt: timestamptz
    _lte: timestamptz
    _neq: timestamptz
    _nin: [timestamptz!]
}

"order by aggregate values of table \"users\""
input users_aggregate_order_by {
    count: order_by
    max: users_max_order_by
    min: users_min_order_by
}

"input type for inserting array relation for remote table \"users\""
input users_arr_rel_insert_input {
    data: [users_insert_input!]!
    on_conflict: users_on_conflict
}

"Boolean expression to filter rows from the table \"users\". All fields are combined with a logical 'AND'."
input users_bool_exp {
    _and: [users_bool_exp]
    _not: users_bool_exp
    _or: [users_bool_exp]
    channels: relation_user_channels_bool_exp
    createdAt: timestamptz_comparison_exp
    email: String_comparison_exp
    firstName: String_comparison_exp
    id: uuid_comparison_exp
    lastName: String_comparison_exp
    messages: relation_channel_user_messages_bool_exp
    subscriptions: subscriptions_bool_exp
    updatedAt: timestamptz_comparison_exp
    username: String_comparison_exp
}

"input type for inserting data into table \"users\""
input users_insert_input {
    createdAt: timestamptz
    email: String
    firstName: String
    id: uuid
    lastName: String
    subscriptions: subscriptions_arr_rel_insert_input
    updatedAt: timestamptz
    username: String
}

"order by max() on columns of table \"users\""
input users_max_order_by {
    createdAt: order_by
    email: order_by
    firstName: order_by
    id: order_by
    lastName: order_by
    updatedAt: order_by
    username: order_by
}

"order by min() on columns of table \"users\""
input users_min_order_by {
    createdAt: order_by
    email: order_by
    firstName: order_by
    id: order_by
    lastName: order_by
    updatedAt: order_by
    username: order_by
}

"input type for inserting object relation for remote table \"users\""
input users_obj_rel_insert_input {
    data: users_insert_input!
    on_conflict: users_on_conflict
}

"on conflict condition type for table \"users\""
input users_on_conflict {
    constraint: users_constraint!
    update_columns: [users_update_column!]!
    where: users_bool_exp
}

"ordering options when selecting data from \"users\""
input users_order_by {
    channels_aggregate: relation_user_channels_aggregate_order_by
    createdAt: order_by
    email: order_by
    firstName: order_by
    id: order_by
    lastName: order_by
    messages_aggregate: relation_channel_user_messages_aggregate_order_by
    subscriptions_aggregate: subscriptions_aggregate_order_by
    updatedAt: order_by
    username: order_by
}

"primary key columns input for table: \"users\""
input users_pk_columns_input {
    id: uuid!
}

"input type for updating data in table \"users\""
input users_set_input {
    createdAt: timestamptz
    email: String
    firstName: String
    id: uuid
    lastName: String
    updatedAt: timestamptz
    username: String
}

"expression to compare columns of type uuid. All fields are combined with logical 'AND'."
input uuid_comparison_exp {
    _eq: uuid
    _gt: uuid
    _gte: uuid
    _in: [uuid!]
    _is_null: Boolean
    _lt: uuid
    _lte: uuid
    _neq: uuid
    _nin: [uuid!]
}


scalar timestamptz

scalar uuid
